// tslint:disable
/**
 * おおまか家計簿 API
 * Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  BASE_PATH,
  COLLECTION_FORMATS,
  RequestArgs,
  BaseAPI,
  RequiredError,
} from './base'

/**
 *
 * @export
 * @interface AnnualChange
 */
export interface AnnualChange {
  /**
   *
   * @type {AnnualChangeData}
   * @memberof AnnualChange
   */
  data: AnnualChangeData
}
/**
 *
 * @export
 * @interface AnnualChangeData
 */
export interface AnnualChangeData {
  /**
   *
   * @type {string}
   * @memberof AnnualChangeData
   */
  month: string
  /**
   *
   * @type {number}
   * @memberof AnnualChangeData
   */
  sum_money: number
}
/**
 *
 * @export
 * @interface Calendar
 */
export interface Calendar {
  /**
   *
   * @type {string}
   * @memberof Calendar
   */
  date: string
  /**
   *
   * @type {number}
   * @memberof Calendar
   */
  sum_month_money: number
  /**
   *
   * @type {CalendarSumDateMoney}
   * @memberof Calendar
   */
  sum_date_money: CalendarSumDateMoney
}
/**
 *
 * @export
 * @interface CalendarSumDateMoney
 */
export interface CalendarSumDateMoney {
  /**
   *
   * @type {string}
   * @memberof CalendarSumDateMoney
   */
  date: string
  /**
   *
   * @type {number}
   * @memberof CalendarSumDateMoney
   */
  money: number
}
/**
 *
 * @export
 * @interface Category
 */
export interface Category {
  /**
   *
   * @type {number}
   * @memberof Category
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof Category
   */
  category_name: string
  /**
   *
   * @type {number}
   * @memberof Category
   */
  color_type: number
}
/**
 *
 * @export
 * @interface Detail
 */
export interface Detail {
  /**
   *
   * @type {number}
   * @memberof Detail
   */
  id: number
  /**
   *
   * @type {number}
   * @memberof Detail
   */
  money: number
  /**
   *
   * @type {string}
   * @memberof Detail
   */
  img_file: string
  /**
   *
   * @type {number}
   * @memberof Detail
   */
  category_id: number
  /**
   *
   * @type {string}
   * @memberof Detail
   */
  category_name: string
}
/**
 *
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
  /**
   *
   * @type {number}
   * @memberof InlineObject
   */
  email?: number
}
/**
 *
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
  /**
   *
   * @type {number}
   * @memberof InlineObject1
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof InlineObject1
   */
  auth_key?: string
}
/**
 *
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
  /**
   *
   * @type {string}
   * @memberof InlineObject2
   */
  password?: string
}
/**
 *
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
  /**
   *
   * @type {number}
   * @memberof InlineObject3
   */
  category_id?: number
  /**
   *
   * @type {number}
   * @memberof InlineObject3
   */
  money?: number
  /**
   *
   * @type {string}
   * @memberof InlineObject3
   */
  img_file?: string
  /**
   *
   * @type {string}
   * @memberof InlineObject3
   */
  date?: string
}
/**
 *
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
  /**
   *
   * @type {number}
   * @memberof InlineObject4
   */
  money?: number
  /**
   *
   * @type {number}
   * @memberof InlineObject4
   */
  catgory_id?: number
  /**
   *
   * @type {string}
   * @memberof InlineObject4
   */
  img_file?: string
  /**
   *
   * @type {string}
   * @memberof InlineObject4
   */
  date?: string
}
/**
 *
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
  /**
   *
   * @type {string}
   * @memberof InlineObject5
   */
  category_name?: string
  /**
   *
   * @type {number}
   * @memberof InlineObject5
   */
  color_type?: number
}
/**
 *
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
  /**
   *
   * @type {number}
   * @memberof InlineObject6
   */
  id?: number
  /**
   *
   * @type {string}
   * @memberof InlineObject6
   */
  category_name?: string
  /**
   *
   * @type {number}
   * @memberof InlineObject6
   */
  color_type?: number
}
/**
 *
 * @export
 * @interface InlineObject7
 */
export interface InlineObject7 {
  /**
   *
   * @type {number}
   * @memberof InlineObject7
   */
  user_id?: number
  /**
   *
   * @type {string}
   * @memberof InlineObject7
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof InlineObject7
   */
  email?: string
}
/**
 * ログイン時のリクエストデータ
 * @export
 * @interface Login
 */
export interface Login {
  /**
   *
   * @type {string}
   * @memberof Login
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof Login
   */
  password: string
}
/**
 *
 * @export
 * @interface MonthRate
 */
export interface MonthRate {
  /**
   *
   * @type {MonthRateData}
   * @memberof MonthRate
   */
  data: MonthRateData
}
/**
 *
 * @export
 * @interface MonthRateData
 */
export interface MonthRateData {
  /**
   *
   * @type {number}
   * @memberof MonthRateData
   */
  category_id: number
  /**
   *
   * @type {string}
   * @memberof MonthRateData
   */
  category_name: string
  /**
   *
   * @type {number}
   * @memberof MonthRateData
   */
  color_type: number
  /**
   *
   * @type {number}
   * @memberof MonthRateData
   */
  money: number
}
/**
 *
 * @export
 * @interface Partner
 */
export interface Partner {
  /**
   *
   * @type {number}
   * @memberof Partner
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof Partner
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Partner
   */
  email: string
}
/**
 *
 * @export
 * @interface Partners
 */
export interface Partners {
  /**
   *
   * @type {Partner}
   * @memberof Partners
   */
  data?: Partner
}
/**
 * 会員登録時のリクエストデータ
 * @export
 * @interface Register
 */
export interface Register {
  /**
   *
   * @type {string}
   * @memberof Register
   */
  name: string
  /**
   *
   * @type {string}
   * @memberof Register
   */
  email: string
  /**
   *
   * @type {string}
   * @memberof Register
   */
  password: string
}
/**
 * ユーザー情報
 * @export
 * @interface User
 */
export interface User {
  /**
   *
   * @type {number}
   * @memberof User
   */
  id: number
  /**
   *
   * @type {string}
   * @memberof User
   */
  name?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  email?: string
  /**
   *
   * @type {string}
   * @memberof User
   */
  password?: string
  /**
   *
   * @type {number}
   * @memberof User
   */
  user_type?: number
  /**
   *
   * @type {number}
   * @memberof User
   */
  main_user_id?: number
}

/**
 * AnnualChangeApi - axios parameter creator
 * @export
 */
export const AnnualChangeApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 年間の支出推移
     * @summary No.20 年間の支出推移取得
     * @param {string} date 現在日付
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annualChangeDateGet: async (
      date: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'date' is not null or undefined
      if (date === null || date === undefined) {
        throw new RequiredError(
          'date',
          'Required parameter date was null or undefined when calling annualChangeDateGet.'
        )
      }
      const localVarPath = `/annual_change/{date}`.replace(
        `{${'date'}}`,
        encodeURIComponent(String(date))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AnnualChangeApi - functional programming interface
 * @export
 */
export const AnnualChangeApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 年間の支出推移
     * @summary No.20 年間の支出推移取得
     * @param {string} date 現在日付
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async annualChangeDateGet(
      date: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<AnnualChange>>
    > {
      const localVarAxiosArgs = await AnnualChangeApiAxiosParamCreator(
        configuration
      ).annualChangeDateGet(date, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * AnnualChangeApi - factory interface
 * @export
 */
export const AnnualChangeApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * 年間の支出推移
     * @summary No.20 年間の支出推移取得
     * @param {string} date 現在日付
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    annualChangeDateGet(
      date: string,
      options?: any
    ): AxiosPromise<Array<AnnualChange>> {
      return AnnualChangeApiFp(configuration)
        .annualChangeDateGet(date, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * AnnualChangeApi - object-oriented interface
 * @export
 * @class AnnualChangeApi
 * @extends {BaseAPI}
 */
export class AnnualChangeApi extends BaseAPI {
  /**
   * 年間の支出推移
   * @summary No.20 年間の支出推移取得
   * @param {string} date 現在日付
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AnnualChangeApi
   */
  public annualChangeDateGet(date: string, options?: any) {
    return AnnualChangeApiFp(this.configuration)
      .annualChangeDateGet(date, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CalendarApi - axios parameter creator
 * @export
 */
export const CalendarApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * カレンダー情報取得
     * @summary No.10 カレンダー情報取得
     * @param {string} yearAndMonth year_and_month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calendarYearAndMonthGet: async (
      yearAndMonth: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'yearAndMonth' is not null or undefined
      if (yearAndMonth === null || yearAndMonth === undefined) {
        throw new RequiredError(
          'yearAndMonth',
          'Required parameter yearAndMonth was null or undefined when calling calendarYearAndMonthGet.'
        )
      }
      const localVarPath = `/calendar/{year_and_month}`.replace(
        `{${'year_and_month'}}`,
        encodeURIComponent(String(yearAndMonth))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CalendarApi - functional programming interface
 * @export
 */
export const CalendarApiFp = function (configuration?: Configuration) {
  return {
    /**
     * カレンダー情報取得
     * @summary No.10 カレンダー情報取得
     * @param {string} yearAndMonth year_and_month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async calendarYearAndMonthGet(
      yearAndMonth: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Calendar>>
    > {
      const localVarAxiosArgs = await CalendarApiAxiosParamCreator(
        configuration
      ).calendarYearAndMonthGet(yearAndMonth, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * CalendarApi - factory interface
 * @export
 */
export const CalendarApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * カレンダー情報取得
     * @summary No.10 カレンダー情報取得
     * @param {string} yearAndMonth year_and_month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    calendarYearAndMonthGet(
      yearAndMonth: string,
      options?: any
    ): AxiosPromise<Array<Calendar>> {
      return CalendarApiFp(configuration)
        .calendarYearAndMonthGet(yearAndMonth, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CalendarApi - object-oriented interface
 * @export
 * @class CalendarApi
 * @extends {BaseAPI}
 */
export class CalendarApi extends BaseAPI {
  /**
   * カレンダー情報取得
   * @summary No.10 カレンダー情報取得
   * @param {string} yearAndMonth year_and_month
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CalendarApi
   */
  public calendarYearAndMonthGet(yearAndMonth: string, options?: any) {
    return CalendarApiFp(this.configuration)
      .calendarYearAndMonthGet(yearAndMonth, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * CategoryApi - axios parameter creator
 * @export
 */
export const CategoryApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * カテゴリ新規登録
     * @summary No.16 カテゴリ新規登録
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCategory: async (
      inlineObject5?: InlineObject5,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/category/create`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof inlineObject5 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject5 !== undefined ? inlineObject5 : {})
        : inlineObject5 || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * カテゴリ情報削除
     * @summary No.18 カテゴリ情報削除
     * @param {number} categoryId カテゴリID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory: async (
      categoryId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryId' is not null or undefined
      if (categoryId === null || categoryId === undefined) {
        throw new RequiredError(
          'categoryId',
          'Required parameter categoryId was null or undefined when calling deleteCategory.'
        )
      }
      const localVarPath = `/category/{category_id}`.replace(
        `{${'category_id'}}`,
        encodeURIComponent(String(categoryId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * カテゴリ情報編集
     * @summary No.17 カテゴリ情報編集
     * @param {number} categoryId カテゴリID
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editCategory: async (
      categoryId: number,
      inlineObject6?: InlineObject6,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'categoryId' is not null or undefined
      if (categoryId === null || categoryId === undefined) {
        throw new RequiredError(
          'categoryId',
          'Required parameter categoryId was null or undefined when calling editCategory.'
        )
      }
      const localVarPath = `/category/{category_id}`.replace(
        `{${'category_id'}}`,
        encodeURIComponent(String(categoryId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof inlineObject6 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject6 !== undefined ? inlineObject6 : {})
        : inlineObject6 || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * カテゴリ情報取得
     * @summary No.15 カテゴリ情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategories: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/category`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * CategoryApi - functional programming interface
 * @export
 */
export const CategoryApiFp = function (configuration?: Configuration) {
  return {
    /**
     * カテゴリ新規登録
     * @summary No.16 カテゴリ新規登録
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addCategory(
      inlineObject5?: InlineObject5,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Category>>
    > {
      const localVarAxiosArgs = await CategoryApiAxiosParamCreator(
        configuration
      ).addCategory(inlineObject5, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * カテゴリ情報削除
     * @summary No.18 カテゴリ情報削除
     * @param {number} categoryId カテゴリID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteCategory(
      categoryId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await CategoryApiAxiosParamCreator(
        configuration
      ).deleteCategory(categoryId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * カテゴリ情報編集
     * @summary No.17 カテゴリ情報編集
     * @param {number} categoryId カテゴリID
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editCategory(
      categoryId: number,
      inlineObject6?: InlineObject6,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Category>>
    > {
      const localVarAxiosArgs = await CategoryApiAxiosParamCreator(
        configuration
      ).editCategory(categoryId, inlineObject6, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * カテゴリ情報取得
     * @summary No.15 カテゴリ情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getCategories(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Category>>
    > {
      const localVarAxiosArgs = await CategoryApiAxiosParamCreator(
        configuration
      ).getCategories(options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * CategoryApi - factory interface
 * @export
 */
export const CategoryApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * カテゴリ新規登録
     * @summary No.16 カテゴリ新規登録
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addCategory(
      inlineObject5?: InlineObject5,
      options?: any
    ): AxiosPromise<Array<Category>> {
      return CategoryApiFp(configuration)
        .addCategory(inlineObject5, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * カテゴリ情報削除
     * @summary No.18 カテゴリ情報削除
     * @param {number} categoryId カテゴリID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCategory(categoryId: number, options?: any): AxiosPromise<void> {
      return CategoryApiFp(configuration)
        .deleteCategory(categoryId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * カテゴリ情報編集
     * @summary No.17 カテゴリ情報編集
     * @param {number} categoryId カテゴリID
     * @param {InlineObject6} [inlineObject6]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editCategory(
      categoryId: number,
      inlineObject6?: InlineObject6,
      options?: any
    ): AxiosPromise<Array<Category>> {
      return CategoryApiFp(configuration)
        .editCategory(categoryId, inlineObject6, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * カテゴリ情報取得
     * @summary No.15 カテゴリ情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCategories(options?: any): AxiosPromise<Array<Category>> {
      return CategoryApiFp(configuration)
        .getCategories(options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * CategoryApi - object-oriented interface
 * @export
 * @class CategoryApi
 * @extends {BaseAPI}
 */
export class CategoryApi extends BaseAPI {
  /**
   * カテゴリ新規登録
   * @summary No.16 カテゴリ新規登録
   * @param {InlineObject5} [inlineObject5]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public addCategory(inlineObject5?: InlineObject5, options?: any) {
    return CategoryApiFp(this.configuration)
      .addCategory(inlineObject5, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * カテゴリ情報削除
   * @summary No.18 カテゴリ情報削除
   * @param {number} categoryId カテゴリID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public deleteCategory(categoryId: number, options?: any) {
    return CategoryApiFp(this.configuration)
      .deleteCategory(categoryId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * カテゴリ情報編集
   * @summary No.17 カテゴリ情報編集
   * @param {number} categoryId カテゴリID
   * @param {InlineObject6} [inlineObject6]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public editCategory(
    categoryId: number,
    inlineObject6?: InlineObject6,
    options?: any
  ) {
    return CategoryApiFp(this.configuration)
      .editCategory(categoryId, inlineObject6, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * カテゴリ情報取得
   * @summary No.15 カテゴリ情報取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof CategoryApi
   */
  public getCategories(options?: any) {
    return CategoryApiFp(this.configuration)
      .getCategories(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * DetailApi - axios parameter creator
 * @export
 */
export const DetailApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 金額入力
     * @summary No.12 金額情報新規登録
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDetail: async (
      inlineObject3?: InlineObject3,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/detail/create`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof inlineObject3 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject3 !== undefined ? inlineObject3 : {})
        : inlineObject3 || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 金額削除
     * @summary No.14 金額情報削除
     * @param {number} moneyId money_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDetail: async (
      moneyId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'moneyId' is not null or undefined
      if (moneyId === null || moneyId === undefined) {
        throw new RequiredError(
          'moneyId',
          'Required parameter moneyId was null or undefined when calling deleteDetail.'
        )
      }
      const localVarPath = `/detail/{money_id}`.replace(
        `{${'money_id'}}`,
        encodeURIComponent(String(moneyId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 金額編集
     * @summary No.13 金額情報編集
     * @param {number} moneyId money_id
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editDetail: async (
      moneyId: number,
      inlineObject4?: InlineObject4,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'moneyId' is not null or undefined
      if (moneyId === null || moneyId === undefined) {
        throw new RequiredError(
          'moneyId',
          'Required parameter moneyId was null or undefined when calling editDetail.'
        )
      }
      const localVarPath = `/detail/{money_id}`.replace(
        `{${'money_id'}}`,
        encodeURIComponent(String(moneyId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'PUT',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof inlineObject4 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject4 !== undefined ? inlineObject4 : {})
        : inlineObject4 || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 日別の金額情報取得
     * @summary No.11 日別の金額情報取得
     * @param {string} date date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDetails: async (
      date: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'date' is not null or undefined
      if (date === null || date === undefined) {
        throw new RequiredError(
          'date',
          'Required parameter date was null or undefined when calling getDetails.'
        )
      }
      const localVarPath = `/detail/{date}`.replace(
        `{${'date'}}`,
        encodeURIComponent(String(date))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DetailApi - functional programming interface
 * @export
 */
export const DetailApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 金額入力
     * @summary No.12 金額情報新規登録
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async addDetail(
      inlineObject3?: InlineObject3,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Detail>>
    > {
      const localVarAxiosArgs = await DetailApiAxiosParamCreator(
        configuration
      ).addDetail(inlineObject3, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * 金額削除
     * @summary No.14 金額情報削除
     * @param {number} moneyId money_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async deleteDetail(
      moneyId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await DetailApiAxiosParamCreator(
        configuration
      ).deleteDetail(moneyId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * 金額編集
     * @summary No.13 金額情報編集
     * @param {number} moneyId money_id
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async editDetail(
      moneyId: number,
      inlineObject4?: InlineObject4,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Detail>>
    > {
      const localVarAxiosArgs = await DetailApiAxiosParamCreator(
        configuration
      ).editDetail(moneyId, inlineObject4, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * 日別の金額情報取得
     * @summary No.11 日別の金額情報取得
     * @param {string} date date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getDetails(
      date: string,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Detail>>
    > {
      const localVarAxiosArgs = await DetailApiAxiosParamCreator(
        configuration
      ).getDetails(date, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * DetailApi - factory interface
 * @export
 */
export const DetailApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * 金額入力
     * @summary No.12 金額情報新規登録
     * @param {InlineObject3} [inlineObject3]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addDetail(
      inlineObject3?: InlineObject3,
      options?: any
    ): AxiosPromise<Array<Detail>> {
      return DetailApiFp(configuration)
        .addDetail(inlineObject3, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 金額削除
     * @summary No.14 金額情報削除
     * @param {number} moneyId money_id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteDetail(moneyId: number, options?: any): AxiosPromise<void> {
      return DetailApiFp(configuration)
        .deleteDetail(moneyId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 金額編集
     * @summary No.13 金額情報編集
     * @param {number} moneyId money_id
     * @param {InlineObject4} [inlineObject4]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    editDetail(
      moneyId: number,
      inlineObject4?: InlineObject4,
      options?: any
    ): AxiosPromise<Array<Detail>> {
      return DetailApiFp(configuration)
        .editDetail(moneyId, inlineObject4, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 日別の金額情報取得
     * @summary No.11 日別の金額情報取得
     * @param {string} date date
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getDetails(date: string, options?: any): AxiosPromise<Array<Detail>> {
      return DetailApiFp(configuration)
        .getDetails(date, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * DetailApi - object-oriented interface
 * @export
 * @class DetailApi
 * @extends {BaseAPI}
 */
export class DetailApi extends BaseAPI {
  /**
   * 金額入力
   * @summary No.12 金額情報新規登録
   * @param {InlineObject3} [inlineObject3]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DetailApi
   */
  public addDetail(inlineObject3?: InlineObject3, options?: any) {
    return DetailApiFp(this.configuration)
      .addDetail(inlineObject3, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 金額削除
   * @summary No.14 金額情報削除
   * @param {number} moneyId money_id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DetailApi
   */
  public deleteDetail(moneyId: number, options?: any) {
    return DetailApiFp(this.configuration)
      .deleteDetail(moneyId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 金額編集
   * @summary No.13 金額情報編集
   * @param {number} moneyId money_id
   * @param {InlineObject4} [inlineObject4]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DetailApi
   */
  public editDetail(
    moneyId: number,
    inlineObject4?: InlineObject4,
    options?: any
  ) {
    return DetailApiFp(this.configuration)
      .editDetail(moneyId, inlineObject4, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 日別の金額情報取得
   * @summary No.11 日別の金額情報取得
   * @param {string} date date
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DetailApi
   */
  public getDetails(date: string, options?: any) {
    return DetailApiFp(this.configuration)
      .getDetails(date, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * MonthRateApi - axios parameter creator
 * @export
 */
export const MonthRateApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 月のカテゴリ別支出金額取得
     * @summary No.19 月のカテゴリ別支出金額取得
     * @param {string} month month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    monthRateMonthGet: async (
      month: string,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'month' is not null or undefined
      if (month === null || month === undefined) {
        throw new RequiredError(
          'month',
          'Required parameter month was null or undefined when calling monthRateMonthGet.'
        )
      }
      const localVarPath = `/month-rate/{month}`.replace(
        `{${'month'}}`,
        encodeURIComponent(String(month))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * MonthRateApi - functional programming interface
 * @export
 */
export const MonthRateApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 月のカテゴリ別支出金額取得
     * @summary No.19 月のカテゴリ別支出金額取得
     * @param {string} month month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async monthRateMonthGet(
      month: string,
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<MonthRate>>
    > {
      const localVarAxiosArgs = await MonthRateApiAxiosParamCreator(
        configuration
      ).monthRateMonthGet(month, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * MonthRateApi - factory interface
 * @export
 */
export const MonthRateApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * 月のカテゴリ別支出金額取得
     * @summary No.19 月のカテゴリ別支出金額取得
     * @param {string} month month
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    monthRateMonthGet(
      month: string,
      options?: any
    ): AxiosPromise<Array<MonthRate>> {
      return MonthRateApiFp(configuration)
        .monthRateMonthGet(month, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * MonthRateApi - object-oriented interface
 * @export
 * @class MonthRateApi
 * @extends {BaseAPI}
 */
export class MonthRateApi extends BaseAPI {
  /**
   * 月のカテゴリ別支出金額取得
   * @summary No.19 月のカテゴリ別支出金額取得
   * @param {string} month month
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof MonthRateApi
   */
  public monthRateMonthGet(month: string, options?: any) {
    return MonthRateApiFp(this.configuration)
      .monthRateMonthGet(month, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * PartnerApi - axios parameter creator
 * @export
 */
export const PartnerApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * パートナーユーザー登録
     * @summary No.22 パートナーユーザー登録
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partnerCreatePost: async (
      inlineObject7?: InlineObject7,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/partner/create`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof inlineObject7 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject7 !== undefined ? inlineObject7 : {})
        : inlineObject7 || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * パートナーユーザー取得
     * @summary No.21 パートナーユーザー取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partnerGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/partner`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * パートナーユーザー削除
     * @summary No.23 パートナーユーザー削除
     * @param {number} userId パートナーユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partnerUserIdDelete: async (
      userId: number,
      options: any = {}
    ): Promise<RequestArgs> => {
      // verify required parameter 'userId' is not null or undefined
      if (userId === null || userId === undefined) {
        throw new RequiredError(
          'userId',
          'Required parameter userId was null or undefined when calling partnerUserIdDelete.'
        )
      }
      const localVarPath = `/partner/{user_id}`.replace(
        `{${'user_id'}}`,
        encodeURIComponent(String(userId))
      )
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * PartnerApi - functional programming interface
 * @export
 */
export const PartnerApiFp = function (configuration?: Configuration) {
  return {
    /**
     * パートナーユーザー登録
     * @summary No.22 パートナーユーザー登録
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partnerCreatePost(
      inlineObject7?: InlineObject7,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Partner>>
    > {
      const localVarAxiosArgs = await PartnerApiAxiosParamCreator(
        configuration
      ).partnerCreatePost(inlineObject7, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * パートナーユーザー取得
     * @summary No.21 パートナーユーザー取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partnerGet(
      options?: any
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string
      ) => AxiosPromise<Array<Partners>>
    > {
      const localVarAxiosArgs = await PartnerApiAxiosParamCreator(
        configuration
      ).partnerGet(options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * パートナーユーザー削除
     * @summary No.23 パートナーユーザー削除
     * @param {number} userId パートナーユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partnerUserIdDelete(
      userId: number,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await PartnerApiAxiosParamCreator(
        configuration
      ).partnerUserIdDelete(userId, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * PartnerApi - factory interface
 * @export
 */
export const PartnerApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * パートナーユーザー登録
     * @summary No.22 パートナーユーザー登録
     * @param {InlineObject7} [inlineObject7]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partnerCreatePost(
      inlineObject7?: InlineObject7,
      options?: any
    ): AxiosPromise<Array<Partner>> {
      return PartnerApiFp(configuration)
        .partnerCreatePost(inlineObject7, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * パートナーユーザー取得
     * @summary No.21 パートナーユーザー取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partnerGet(options?: any): AxiosPromise<Array<Partners>> {
      return PartnerApiFp(configuration)
        .partnerGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * パートナーユーザー削除
     * @summary No.23 パートナーユーザー削除
     * @param {number} userId パートナーユーザーID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partnerUserIdDelete(userId: number, options?: any): AxiosPromise<void> {
      return PartnerApiFp(configuration)
        .partnerUserIdDelete(userId, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * PartnerApi - object-oriented interface
 * @export
 * @class PartnerApi
 * @extends {BaseAPI}
 */
export class PartnerApi extends BaseAPI {
  /**
   * パートナーユーザー登録
   * @summary No.22 パートナーユーザー登録
   * @param {InlineObject7} [inlineObject7]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PartnerApi
   */
  public partnerCreatePost(inlineObject7?: InlineObject7, options?: any) {
    return PartnerApiFp(this.configuration)
      .partnerCreatePost(inlineObject7, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * パートナーユーザー取得
   * @summary No.21 パートナーユーザー取得
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PartnerApi
   */
  public partnerGet(options?: any) {
    return PartnerApiFp(this.configuration)
      .partnerGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * パートナーユーザー削除
   * @summary No.23 パートナーユーザー削除
   * @param {number} userId パートナーユーザーID
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof PartnerApi
   */
  public partnerUserIdDelete(userId: number, options?: any) {
    return PartnerApiFp(this.configuration)
      .partnerUserIdDelete(userId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (
  configuration?: Configuration
) {
  return {
    /**
     * 認証ルーティング
     * @summary No.5 認証ルーティング
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGet: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/auth`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'GET',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      // authentication CookieAuth required

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * パスワード変更処理
     * @summary No.9 パスワード変更
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePasswordPost: async (
      inlineObject2?: InlineObject2,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/change-password`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof inlineObject2 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject2 !== undefined ? inlineObject2 : {})
        : inlineObject2 || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * ログイン処理
     * @summary No.1 ログイン
     * @param {Login} [login] リクエストパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginPost: async (
      login?: Login,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/login`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof login !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(login !== undefined ? login : {})
        : login || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * ログアウト処理
     * @summary No.6 ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutDelete: async (options: any = {}): Promise<RequestArgs> => {
      const localVarPath = `/logout`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'DELETE',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * パートナーユーザーによるログイン処理
     * @summary No.3 パートナーログイン
     * @param {Login} [login] リクエストパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partnerLoginPost: async (
      login?: Login,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/partner-login`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof login !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(login !== undefined ? login : {})
        : login || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * 会員登録処理
     * @summary No.2 会員登録
     * @param {Register} [register] リクエストパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerPost: async (
      register?: Register,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/register`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof register !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(register !== undefined ? register : {})
        : register || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * パスワードリマインド キー送信
     * @summary No.8 パスワードリマインド(キー送信)
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remaindKeyPost: async (
      inlineObject1?: InlineObject1,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/remaind-key`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof inlineObject1 !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject1 !== undefined ? inlineObject1 : {})
        : inlineObject1 || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * パスワードリマインド アドレス送信
     * @summary No.7 パスワードリマインド(アドレス送信)
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remaindMailPost: async (
      inlineObject?: InlineObject,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/remaind-mail`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof inlineObject !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(inlineObject !== undefined ? inlineObject : {})
        : inlineObject || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     * お試しユーザーによるログイン処理
     * @summary No.4 お試しログイン
     * @param {Login} [login] リクエストパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trialLoginPost: async (
      login?: Login,
      options: any = {}
    ): Promise<RequestArgs> => {
      const localVarPath = `/trial-login`
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }
      const localVarRequestOptions = {
        method: 'POST',
        ...baseOptions,
        ...options,
      }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      }
      const needsSerialization =
        typeof login !== 'string' ||
        localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(login !== undefined ? login : {})
        : login || ''

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function (configuration?: Configuration) {
  return {
    /**
     * 認証ルーティング
     * @summary No.5 認証ルーティング
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async authGet(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).authGet(options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * パスワード変更処理
     * @summary No.9 パスワード変更
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async changePasswordPost(
      inlineObject2?: InlineObject2,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).changePasswordPost(inlineObject2, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * ログイン処理
     * @summary No.1 ログイン
     * @param {Login} [login] リクエストパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async loginPost(
      login?: Login,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).loginPost(login, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * ログアウト処理
     * @summary No.6 ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async logoutDelete(
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).logoutDelete(options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * パートナーユーザーによるログイン処理
     * @summary No.3 パートナーログイン
     * @param {Login} [login] リクエストパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async partnerLoginPost(
      login?: Login,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).partnerLoginPost(login, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * 会員登録処理
     * @summary No.2 会員登録
     * @param {Register} [register] リクエストパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async registerPost(
      register?: Register,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).registerPost(register, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * パスワードリマインド キー送信
     * @summary No.8 パスワードリマインド(キー送信)
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async remaindKeyPost(
      inlineObject1?: InlineObject1,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).remaindKeyPost(inlineObject1, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * パスワードリマインド アドレス送信
     * @summary No.7 パスワードリマインド(アドレス送信)
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async remaindMailPost(
      inlineObject?: InlineObject,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).remaindMailPost(inlineObject, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
     * お試しユーザーによるログイン処理
     * @summary No.4 お試しログイン
     * @param {Login} [login] リクエストパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async trialLoginPost(
      login?: Login,
      options?: any
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>
    > {
      const localVarAxiosArgs = await UsersApiAxiosParamCreator(
        configuration
      ).trialLoginPost(login, options)
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance
) {
  return {
    /**
     * 認証ルーティング
     * @summary No.5 認証ルーティング
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    authGet(options?: any): AxiosPromise<Array<User>> {
      return UsersApiFp(configuration)
        .authGet(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * パスワード変更処理
     * @summary No.9 パスワード変更
     * @param {InlineObject2} [inlineObject2]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changePasswordPost(
      inlineObject2?: InlineObject2,
      options?: any
    ): AxiosPromise<void> {
      return UsersApiFp(configuration)
        .changePasswordPost(inlineObject2, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * ログイン処理
     * @summary No.1 ログイン
     * @param {Login} [login] リクエストパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    loginPost(login?: Login, options?: any): AxiosPromise<Array<User>> {
      return UsersApiFp(configuration)
        .loginPost(login, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * ログアウト処理
     * @summary No.6 ログアウト
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    logoutDelete(options?: any): AxiosPromise<void> {
      return UsersApiFp(configuration)
        .logoutDelete(options)
        .then((request) => request(axios, basePath))
    },
    /**
     * パートナーユーザーによるログイン処理
     * @summary No.3 パートナーログイン
     * @param {Login} [login] リクエストパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    partnerLoginPost(login?: Login, options?: any): AxiosPromise<Array<User>> {
      return UsersApiFp(configuration)
        .partnerLoginPost(login, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * 会員登録処理
     * @summary No.2 会員登録
     * @param {Register} [register] リクエストパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerPost(
      register?: Register,
      options?: any
    ): AxiosPromise<Array<User>> {
      return UsersApiFp(configuration)
        .registerPost(register, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * パスワードリマインド キー送信
     * @summary No.8 パスワードリマインド(キー送信)
     * @param {InlineObject1} [inlineObject1]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remaindKeyPost(
      inlineObject1?: InlineObject1,
      options?: any
    ): AxiosPromise<Array<User>> {
      return UsersApiFp(configuration)
        .remaindKeyPost(inlineObject1, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * パスワードリマインド アドレス送信
     * @summary No.7 パスワードリマインド(アドレス送信)
     * @param {InlineObject} [inlineObject]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    remaindMailPost(
      inlineObject?: InlineObject,
      options?: any
    ): AxiosPromise<void> {
      return UsersApiFp(configuration)
        .remaindMailPost(inlineObject, options)
        .then((request) => request(axios, basePath))
    },
    /**
     * お試しユーザーによるログイン処理
     * @summary No.4 お試しログイン
     * @param {Login} [login] リクエストパラメータ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    trialLoginPost(login?: Login, options?: any): AxiosPromise<Array<User>> {
      return UsersApiFp(configuration)
        .trialLoginPost(login, options)
        .then((request) => request(axios, basePath))
    },
  }
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
  /**
   * 認証ルーティング
   * @summary No.5 認証ルーティング
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public authGet(options?: any) {
    return UsersApiFp(this.configuration)
      .authGet(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * パスワード変更処理
   * @summary No.9 パスワード変更
   * @param {InlineObject2} [inlineObject2]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public changePasswordPost(inlineObject2?: InlineObject2, options?: any) {
    return UsersApiFp(this.configuration)
      .changePasswordPost(inlineObject2, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * ログイン処理
   * @summary No.1 ログイン
   * @param {Login} [login] リクエストパラメータ
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public loginPost(login?: Login, options?: any) {
    return UsersApiFp(this.configuration)
      .loginPost(login, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * ログアウト処理
   * @summary No.6 ログアウト
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public logoutDelete(options?: any) {
    return UsersApiFp(this.configuration)
      .logoutDelete(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * パートナーユーザーによるログイン処理
   * @summary No.3 パートナーログイン
   * @param {Login} [login] リクエストパラメータ
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public partnerLoginPost(login?: Login, options?: any) {
    return UsersApiFp(this.configuration)
      .partnerLoginPost(login, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * 会員登録処理
   * @summary No.2 会員登録
   * @param {Register} [register] リクエストパラメータ
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public registerPost(register?: Register, options?: any) {
    return UsersApiFp(this.configuration)
      .registerPost(register, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * パスワードリマインド キー送信
   * @summary No.8 パスワードリマインド(キー送信)
   * @param {InlineObject1} [inlineObject1]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public remaindKeyPost(inlineObject1?: InlineObject1, options?: any) {
    return UsersApiFp(this.configuration)
      .remaindKeyPost(inlineObject1, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * パスワードリマインド アドレス送信
   * @summary No.7 パスワードリマインド(アドレス送信)
   * @param {InlineObject} [inlineObject]
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public remaindMailPost(inlineObject?: InlineObject, options?: any) {
    return UsersApiFp(this.configuration)
      .remaindMailPost(inlineObject, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   * お試しユーザーによるログイン処理
   * @summary No.4 お試しログイン
   * @param {Login} [login] リクエストパラメータ
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof UsersApi
   */
  public trialLoginPost(login?: Login, options?: any) {
    return UsersApiFp(this.configuration)
      .trialLoginPost(login, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
